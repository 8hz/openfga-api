// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: openfga/v1alpha1/indexer_service.proto

package openfgav1alpha1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Index with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Index) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Index with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in IndexMultiError, or nil if none found.
func (m *Index) ValidateAll() error {
	return m.validate(true)
}

func (m *Index) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if all {
		switch v := interface{}(m.GetSchema()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IndexValidationError{
					field:  "Schema",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IndexValidationError{
					field:  "Schema",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSchema()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IndexValidationError{
				field:  "Schema",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetStats()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IndexValidationError{
					field:  "Stats",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IndexValidationError{
					field:  "Stats",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStats()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IndexValidationError{
				field:  "Stats",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return IndexMultiError(errors)
	}

	return nil
}

// IndexMultiError is an error wrapping multiple validation errors returned by
// Index.ValidateAll() if the designated constraints aren't met.
type IndexMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IndexMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IndexMultiError) AllErrors() []error { return m }

// IndexValidationError is the validation error returned by Index.Validate if
// the designated constraints aren't met.
type IndexValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IndexValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IndexValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IndexValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IndexValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IndexValidationError) ErrorName() string { return "IndexValidationError" }

// Error satisfies the builtin error interface
func (e IndexValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIndex.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IndexValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IndexValidationError{}

// Validate checks the field values on IndexSchema with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *IndexSchema) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IndexSchema with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in IndexSchemaMultiError, or
// nil if none found.
func (m *IndexSchema) ValidateAll() error {
	return m.validate(true)
}

func (m *IndexSchema) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AuthorizationModelId

	for idx, item := range m.GetRelationshipFilters() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, IndexSchemaValidationError{
						field:  fmt.Sprintf("RelationshipFilters[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, IndexSchemaValidationError{
						field:  fmt.Sprintf("RelationshipFilters[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return IndexSchemaValidationError{
					field:  fmt.Sprintf("RelationshipFilters[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return IndexSchemaMultiError(errors)
	}

	return nil
}

// IndexSchemaMultiError is an error wrapping multiple validation errors
// returned by IndexSchema.ValidateAll() if the designated constraints aren't met.
type IndexSchemaMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IndexSchemaMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IndexSchemaMultiError) AllErrors() []error { return m }

// IndexSchemaValidationError is the validation error returned by
// IndexSchema.Validate if the designated constraints aren't met.
type IndexSchemaValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IndexSchemaValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IndexSchemaValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IndexSchemaValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IndexSchemaValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IndexSchemaValidationError) ErrorName() string { return "IndexSchemaValidationError" }

// Error satisfies the builtin error interface
func (e IndexSchemaValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIndexSchema.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IndexSchemaValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IndexSchemaValidationError{}

// Validate checks the field values on IndexStats with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *IndexStats) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IndexStats with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in IndexStatsMultiError, or
// nil if none found.
func (m *IndexStats) ValidateAll() error {
	return m.validate(true)
}

func (m *IndexStats) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Size

	// no validation rules for Rows

	if len(errors) > 0 {
		return IndexStatsMultiError(errors)
	}

	return nil
}

// IndexStatsMultiError is an error wrapping multiple validation errors
// returned by IndexStats.ValidateAll() if the designated constraints aren't met.
type IndexStatsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IndexStatsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IndexStatsMultiError) AllErrors() []error { return m }

// IndexStatsValidationError is the validation error returned by
// IndexStats.Validate if the designated constraints aren't met.
type IndexStatsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IndexStatsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IndexStatsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IndexStatsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IndexStatsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IndexStatsValidationError) ErrorName() string { return "IndexStatsValidationError" }

// Error satisfies the builtin error interface
func (e IndexStatsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIndexStats.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IndexStatsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IndexStatsValidationError{}

// Validate checks the field values on CreateIndexRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateIndexRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateIndexRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateIndexRequestMultiError, or nil if none found.
func (m *CreateIndexRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateIndexRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for StoreId

	// no validation rules for AuthorizationModelId

	for idx, item := range m.GetRelationshipFilters() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateIndexRequestValidationError{
						field:  fmt.Sprintf("RelationshipFilters[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateIndexRequestValidationError{
						field:  fmt.Sprintf("RelationshipFilters[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateIndexRequestValidationError{
					field:  fmt.Sprintf("RelationshipFilters[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CreateIndexRequestMultiError(errors)
	}

	return nil
}

// CreateIndexRequestMultiError is an error wrapping multiple validation errors
// returned by CreateIndexRequest.ValidateAll() if the designated constraints
// aren't met.
type CreateIndexRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateIndexRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateIndexRequestMultiError) AllErrors() []error { return m }

// CreateIndexRequestValidationError is the validation error returned by
// CreateIndexRequest.Validate if the designated constraints aren't met.
type CreateIndexRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateIndexRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateIndexRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateIndexRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateIndexRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateIndexRequestValidationError) ErrorName() string {
	return "CreateIndexRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateIndexRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateIndexRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateIndexRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateIndexRequestValidationError{}

// Validate checks the field values on CreateIndexResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateIndexResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateIndexResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateIndexResponseMultiError, or nil if none found.
func (m *CreateIndexResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateIndexResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return CreateIndexResponseMultiError(errors)
	}

	return nil
}

// CreateIndexResponseMultiError is an error wrapping multiple validation
// errors returned by CreateIndexResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateIndexResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateIndexResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateIndexResponseMultiError) AllErrors() []error { return m }

// CreateIndexResponseValidationError is the validation error returned by
// CreateIndexResponse.Validate if the designated constraints aren't met.
type CreateIndexResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateIndexResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateIndexResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateIndexResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateIndexResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateIndexResponseValidationError) ErrorName() string {
	return "CreateIndexResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateIndexResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateIndexResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateIndexResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateIndexResponseValidationError{}

// Validate checks the field values on GetIndexRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetIndexRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetIndexRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetIndexRequestMultiError, or nil if none found.
func (m *GetIndexRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetIndexRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for StoreId

	// no validation rules for IndexId

	if len(errors) > 0 {
		return GetIndexRequestMultiError(errors)
	}

	return nil
}

// GetIndexRequestMultiError is an error wrapping multiple validation errors
// returned by GetIndexRequest.ValidateAll() if the designated constraints
// aren't met.
type GetIndexRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetIndexRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetIndexRequestMultiError) AllErrors() []error { return m }

// GetIndexRequestValidationError is the validation error returned by
// GetIndexRequest.Validate if the designated constraints aren't met.
type GetIndexRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetIndexRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetIndexRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetIndexRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetIndexRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetIndexRequestValidationError) ErrorName() string { return "GetIndexRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetIndexRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetIndexRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetIndexRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetIndexRequestValidationError{}

// Validate checks the field values on GetIndexResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetIndexResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetIndexResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetIndexResponseMultiError, or nil if none found.
func (m *GetIndexResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetIndexResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetIndex()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetIndexResponseValidationError{
					field:  "Index",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetIndexResponseValidationError{
					field:  "Index",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetIndex()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetIndexResponseValidationError{
				field:  "Index",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetIndexResponseMultiError(errors)
	}

	return nil
}

// GetIndexResponseMultiError is an error wrapping multiple validation errors
// returned by GetIndexResponse.ValidateAll() if the designated constraints
// aren't met.
type GetIndexResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetIndexResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetIndexResponseMultiError) AllErrors() []error { return m }

// GetIndexResponseValidationError is the validation error returned by
// GetIndexResponse.Validate if the designated constraints aren't met.
type GetIndexResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetIndexResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetIndexResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetIndexResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetIndexResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetIndexResponseValidationError) ErrorName() string { return "GetIndexResponseValidationError" }

// Error satisfies the builtin error interface
func (e GetIndexResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetIndexResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetIndexResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetIndexResponseValidationError{}

// Validate checks the field values on DropIndexRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DropIndexRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DropIndexRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DropIndexRequestMultiError, or nil if none found.
func (m *DropIndexRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DropIndexRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for StoreId

	// no validation rules for IndexId

	if len(errors) > 0 {
		return DropIndexRequestMultiError(errors)
	}

	return nil
}

// DropIndexRequestMultiError is an error wrapping multiple validation errors
// returned by DropIndexRequest.ValidateAll() if the designated constraints
// aren't met.
type DropIndexRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DropIndexRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DropIndexRequestMultiError) AllErrors() []error { return m }

// DropIndexRequestValidationError is the validation error returned by
// DropIndexRequest.Validate if the designated constraints aren't met.
type DropIndexRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DropIndexRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DropIndexRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DropIndexRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DropIndexRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DropIndexRequestValidationError) ErrorName() string { return "DropIndexRequestValidationError" }

// Error satisfies the builtin error interface
func (e DropIndexRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDropIndexRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DropIndexRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DropIndexRequestValidationError{}

// Validate checks the field values on DropIndexResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DropIndexResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DropIndexResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DropIndexResponseMultiError, or nil if none found.
func (m *DropIndexResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DropIndexResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DropIndexResponseMultiError(errors)
	}

	return nil
}

// DropIndexResponseMultiError is an error wrapping multiple validation errors
// returned by DropIndexResponse.ValidateAll() if the designated constraints
// aren't met.
type DropIndexResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DropIndexResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DropIndexResponseMultiError) AllErrors() []error { return m }

// DropIndexResponseValidationError is the validation error returned by
// DropIndexResponse.Validate if the designated constraints aren't met.
type DropIndexResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DropIndexResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DropIndexResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DropIndexResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DropIndexResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DropIndexResponseValidationError) ErrorName() string {
	return "DropIndexResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DropIndexResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDropIndexResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DropIndexResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DropIndexResponseValidationError{}

// Validate checks the field values on WatchIndexRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *WatchIndexRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WatchIndexRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// WatchIndexRequestMultiError, or nil if none found.
func (m *WatchIndexRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *WatchIndexRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for StoreId

	// no validation rules for IndexId

	if len(errors) > 0 {
		return WatchIndexRequestMultiError(errors)
	}

	return nil
}

// WatchIndexRequestMultiError is an error wrapping multiple validation errors
// returned by WatchIndexRequest.ValidateAll() if the designated constraints
// aren't met.
type WatchIndexRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WatchIndexRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WatchIndexRequestMultiError) AllErrors() []error { return m }

// WatchIndexRequestValidationError is the validation error returned by
// WatchIndexRequest.Validate if the designated constraints aren't met.
type WatchIndexRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WatchIndexRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WatchIndexRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WatchIndexRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WatchIndexRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WatchIndexRequestValidationError) ErrorName() string {
	return "WatchIndexRequestValidationError"
}

// Error satisfies the builtin error interface
func (e WatchIndexRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWatchIndexRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WatchIndexRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WatchIndexRequestValidationError{}

// Validate checks the field values on WatchIndexResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *WatchIndexResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WatchIndexResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// WatchIndexResponseMultiError, or nil if none found.
func (m *WatchIndexResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *WatchIndexResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetRelationshipTuple()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, WatchIndexResponseValidationError{
					field:  "RelationshipTuple",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, WatchIndexResponseValidationError{
					field:  "RelationshipTuple",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRelationshipTuple()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WatchIndexResponseValidationError{
				field:  "RelationshipTuple",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Update

	if len(errors) > 0 {
		return WatchIndexResponseMultiError(errors)
	}

	return nil
}

// WatchIndexResponseMultiError is an error wrapping multiple validation errors
// returned by WatchIndexResponse.ValidateAll() if the designated constraints
// aren't met.
type WatchIndexResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WatchIndexResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WatchIndexResponseMultiError) AllErrors() []error { return m }

// WatchIndexResponseValidationError is the validation error returned by
// WatchIndexResponse.Validate if the designated constraints aren't met.
type WatchIndexResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WatchIndexResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WatchIndexResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WatchIndexResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WatchIndexResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WatchIndexResponseValidationError) ErrorName() string {
	return "WatchIndexResponseValidationError"
}

// Error satisfies the builtin error interface
func (e WatchIndexResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWatchIndexResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WatchIndexResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WatchIndexResponseValidationError{}

// Validate checks the field values on RelationshipTuple with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *RelationshipTuple) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RelationshipTuple with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RelationshipTupleMultiError, or nil if none found.
func (m *RelationshipTuple) ValidateAll() error {
	return m.validate(true)
}

func (m *RelationshipTuple) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetObject()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RelationshipTupleValidationError{
					field:  "Object",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RelationshipTupleValidationError{
					field:  "Object",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetObject()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RelationshipTupleValidationError{
				field:  "Object",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Relation

	if all {
		switch v := interface{}(m.GetSubject()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RelationshipTupleValidationError{
					field:  "Subject",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RelationshipTupleValidationError{
					field:  "Subject",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSubject()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RelationshipTupleValidationError{
				field:  "Subject",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RelationshipTupleMultiError(errors)
	}

	return nil
}

// RelationshipTupleMultiError is an error wrapping multiple validation errors
// returned by RelationshipTuple.ValidateAll() if the designated constraints
// aren't met.
type RelationshipTupleMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RelationshipTupleMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RelationshipTupleMultiError) AllErrors() []error { return m }

// RelationshipTupleValidationError is the validation error returned by
// RelationshipTuple.Validate if the designated constraints aren't met.
type RelationshipTupleValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RelationshipTupleValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RelationshipTupleValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RelationshipTupleValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RelationshipTupleValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RelationshipTupleValidationError) ErrorName() string {
	return "RelationshipTupleValidationError"
}

// Error satisfies the builtin error interface
func (e RelationshipTupleValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRelationshipTuple.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RelationshipTupleValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RelationshipTupleValidationError{}

// Validate checks the field values on Subject with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Subject) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Subject with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in SubjectMultiError, or nil if none found.
func (m *Subject) ValidateAll() error {
	return m.validate(true)
}

func (m *Subject) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch v := m.SubjectRef.(type) {
	case *Subject_Object:
		if v == nil {
			err := SubjectValidationError{
				field:  "SubjectRef",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetObject()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SubjectValidationError{
						field:  "Object",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SubjectValidationError{
						field:  "Object",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetObject()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SubjectValidationError{
					field:  "Object",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Subject_Userset:
		if v == nil {
			err := SubjectValidationError{
				field:  "SubjectRef",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetUserset()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SubjectValidationError{
						field:  "Userset",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SubjectValidationError{
						field:  "Userset",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetUserset()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SubjectValidationError{
					field:  "Userset",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Subject_TypedWildcard:
		if v == nil {
			err := SubjectValidationError{
				field:  "SubjectRef",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetTypedWildcard()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SubjectValidationError{
						field:  "TypedWildcard",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SubjectValidationError{
						field:  "TypedWildcard",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetTypedWildcard()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SubjectValidationError{
					field:  "TypedWildcard",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return SubjectMultiError(errors)
	}

	return nil
}

// SubjectMultiError is an error wrapping multiple validation errors returned
// by Subject.ValidateAll() if the designated constraints aren't met.
type SubjectMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SubjectMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SubjectMultiError) AllErrors() []error { return m }

// SubjectValidationError is the validation error returned by Subject.Validate
// if the designated constraints aren't met.
type SubjectValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SubjectValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SubjectValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SubjectValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SubjectValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SubjectValidationError) ErrorName() string { return "SubjectValidationError" }

// Error satisfies the builtin error interface
func (e SubjectValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSubject.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SubjectValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SubjectValidationError{}

// Validate checks the field values on Object with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Object) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Object with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in ObjectMultiError, or nil if none found.
func (m *Object) ValidateAll() error {
	return m.validate(true)
}

func (m *Object) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Type

	// no validation rules for Id

	if len(errors) > 0 {
		return ObjectMultiError(errors)
	}

	return nil
}

// ObjectMultiError is an error wrapping multiple validation errors returned by
// Object.ValidateAll() if the designated constraints aren't met.
type ObjectMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ObjectMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ObjectMultiError) AllErrors() []error { return m }

// ObjectValidationError is the validation error returned by Object.Validate if
// the designated constraints aren't met.
type ObjectValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ObjectValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ObjectValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ObjectValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ObjectValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ObjectValidationError) ErrorName() string { return "ObjectValidationError" }

// Error satisfies the builtin error interface
func (e ObjectValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sObject.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ObjectValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ObjectValidationError{}

// Validate checks the field values on Userset with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Userset) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Userset with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in UsersetMultiError, or nil if none found.
func (m *Userset) ValidateAll() error {
	return m.validate(true)
}

func (m *Userset) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Type

	// no validation rules for Id

	// no validation rules for Relation

	if len(errors) > 0 {
		return UsersetMultiError(errors)
	}

	return nil
}

// UsersetMultiError is an error wrapping multiple validation errors returned
// by Userset.ValidateAll() if the designated constraints aren't met.
type UsersetMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UsersetMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UsersetMultiError) AllErrors() []error { return m }

// UsersetValidationError is the validation error returned by Userset.Validate
// if the designated constraints aren't met.
type UsersetValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UsersetValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UsersetValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UsersetValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UsersetValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UsersetValidationError) ErrorName() string { return "UsersetValidationError" }

// Error satisfies the builtin error interface
func (e UsersetValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserset.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UsersetValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UsersetValidationError{}

// Validate checks the field values on TypedWildcard with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *TypedWildcard) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TypedWildcard with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in TypedWildcardMultiError, or
// nil if none found.
func (m *TypedWildcard) ValidateAll() error {
	return m.validate(true)
}

func (m *TypedWildcard) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Type

	if len(errors) > 0 {
		return TypedWildcardMultiError(errors)
	}

	return nil
}

// TypedWildcardMultiError is an error wrapping multiple validation errors
// returned by TypedWildcard.ValidateAll() if the designated constraints
// aren't met.
type TypedWildcardMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TypedWildcardMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TypedWildcardMultiError) AllErrors() []error { return m }

// TypedWildcardValidationError is the validation error returned by
// TypedWildcard.Validate if the designated constraints aren't met.
type TypedWildcardValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TypedWildcardValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TypedWildcardValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TypedWildcardValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TypedWildcardValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TypedWildcardValidationError) ErrorName() string { return "TypedWildcardValidationError" }

// Error satisfies the builtin error interface
func (e TypedWildcardValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTypedWildcard.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TypedWildcardValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TypedWildcardValidationError{}

// Validate checks the field values on RelationshipIndexFilter with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RelationshipIndexFilter) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RelationshipIndexFilter with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RelationshipIndexFilterMultiError, or nil if none found.
func (m *RelationshipIndexFilter) ValidateAll() error {
	return m.validate(true)
}

func (m *RelationshipIndexFilter) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ObjectType

	// no validation rules for SubjectType

	// no validation rules for SubjectRelation

	if len(errors) > 0 {
		return RelationshipIndexFilterMultiError(errors)
	}

	return nil
}

// RelationshipIndexFilterMultiError is an error wrapping multiple validation
// errors returned by RelationshipIndexFilter.ValidateAll() if the designated
// constraints aren't met.
type RelationshipIndexFilterMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RelationshipIndexFilterMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RelationshipIndexFilterMultiError) AllErrors() []error { return m }

// RelationshipIndexFilterValidationError is the validation error returned by
// RelationshipIndexFilter.Validate if the designated constraints aren't met.
type RelationshipIndexFilterValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RelationshipIndexFilterValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RelationshipIndexFilterValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RelationshipIndexFilterValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RelationshipIndexFilterValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RelationshipIndexFilterValidationError) ErrorName() string {
	return "RelationshipIndexFilterValidationError"
}

// Error satisfies the builtin error interface
func (e RelationshipIndexFilterValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRelationshipIndexFilter.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RelationshipIndexFilterValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RelationshipIndexFilterValidationError{}
