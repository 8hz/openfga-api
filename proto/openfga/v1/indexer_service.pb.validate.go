// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: openfga/v1/indexer_service.proto

package openfgav1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ExpandedReadChangesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ExpandedReadChangesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ExpandedReadChangesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ExpandedReadChangesRequestMultiError, or nil if none found.
func (m *ExpandedReadChangesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ExpandedReadChangesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for StoreId

	// no validation rules for AuthorizationModelId

	// no validation rules for TargetObjectType

	// no validation rules for Relation

	// no validation rules for TargetUserObjectType

	// no validation rules for ContinuationToken

	if len(errors) > 0 {
		return ExpandedReadChangesRequestMultiError(errors)
	}

	return nil
}

// ExpandedReadChangesRequestMultiError is an error wrapping multiple
// validation errors returned by ExpandedReadChangesRequest.ValidateAll() if
// the designated constraints aren't met.
type ExpandedReadChangesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExpandedReadChangesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExpandedReadChangesRequestMultiError) AllErrors() []error { return m }

// ExpandedReadChangesRequestValidationError is the validation error returned
// by ExpandedReadChangesRequest.Validate if the designated constraints aren't met.
type ExpandedReadChangesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExpandedReadChangesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExpandedReadChangesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExpandedReadChangesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExpandedReadChangesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExpandedReadChangesRequestValidationError) ErrorName() string {
	return "ExpandedReadChangesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ExpandedReadChangesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExpandedReadChangesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExpandedReadChangesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExpandedReadChangesRequestValidationError{}

// Validate checks the field values on RelationshipUpdate with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RelationshipUpdate) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RelationshipUpdate with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RelationshipUpdateMultiError, or nil if none found.
func (m *RelationshipUpdate) ValidateAll() error {
	return m.validate(true)
}

func (m *RelationshipUpdate) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetObject()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RelationshipUpdateValidationError{
					field:  "Object",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RelationshipUpdateValidationError{
					field:  "Object",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetObject()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RelationshipUpdateValidationError{
				field:  "Object",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Relation

	if all {
		switch v := interface{}(m.GetUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RelationshipUpdateValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RelationshipUpdateValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RelationshipUpdateValidationError{
				field:  "User",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for RelationshipStatus

	if len(errors) > 0 {
		return RelationshipUpdateMultiError(errors)
	}

	return nil
}

// RelationshipUpdateMultiError is an error wrapping multiple validation errors
// returned by RelationshipUpdate.ValidateAll() if the designated constraints
// aren't met.
type RelationshipUpdateMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RelationshipUpdateMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RelationshipUpdateMultiError) AllErrors() []error { return m }

// RelationshipUpdateValidationError is the validation error returned by
// RelationshipUpdate.Validate if the designated constraints aren't met.
type RelationshipUpdateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RelationshipUpdateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RelationshipUpdateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RelationshipUpdateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RelationshipUpdateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RelationshipUpdateValidationError) ErrorName() string {
	return "RelationshipUpdateValidationError"
}

// Error satisfies the builtin error interface
func (e RelationshipUpdateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRelationshipUpdate.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RelationshipUpdateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RelationshipUpdateValidationError{}

// Validate checks the field values on TupleChangesProcessed with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TupleChangesProcessed) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TupleChangesProcessed with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TupleChangesProcessedMultiError, or nil if none found.
func (m *TupleChangesProcessed) ValidateAll() error {
	return m.validate(true)
}

func (m *TupleChangesProcessed) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ContinuationToken

	if len(errors) > 0 {
		return TupleChangesProcessedMultiError(errors)
	}

	return nil
}

// TupleChangesProcessedMultiError is an error wrapping multiple validation
// errors returned by TupleChangesProcessed.ValidateAll() if the designated
// constraints aren't met.
type TupleChangesProcessedMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TupleChangesProcessedMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TupleChangesProcessedMultiError) AllErrors() []error { return m }

// TupleChangesProcessedValidationError is the validation error returned by
// TupleChangesProcessed.Validate if the designated constraints aren't met.
type TupleChangesProcessedValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TupleChangesProcessedValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TupleChangesProcessedValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TupleChangesProcessedValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TupleChangesProcessedValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TupleChangesProcessedValidationError) ErrorName() string {
	return "TupleChangesProcessedValidationError"
}

// Error satisfies the builtin error interface
func (e TupleChangesProcessedValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTupleChangesProcessed.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TupleChangesProcessedValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TupleChangesProcessedValidationError{}

// Validate checks the field values on ExpandedReadChangesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ExpandedReadChangesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ExpandedReadChangesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ExpandedReadChangesResponseMultiError, or nil if none found.
func (m *ExpandedReadChangesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ExpandedReadChangesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch v := m.Result.(type) {
	case *ExpandedReadChangesResponse_Update:
		if v == nil {
			err := ExpandedReadChangesResponseValidationError{
				field:  "Result",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetUpdate()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ExpandedReadChangesResponseValidationError{
						field:  "Update",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ExpandedReadChangesResponseValidationError{
						field:  "Update",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetUpdate()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ExpandedReadChangesResponseValidationError{
					field:  "Update",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *ExpandedReadChangesResponse_TupleChangesProcessed:
		if v == nil {
			err := ExpandedReadChangesResponseValidationError{
				field:  "Result",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetTupleChangesProcessed()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ExpandedReadChangesResponseValidationError{
						field:  "TupleChangesProcessed",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ExpandedReadChangesResponseValidationError{
						field:  "TupleChangesProcessed",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetTupleChangesProcessed()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ExpandedReadChangesResponseValidationError{
					field:  "TupleChangesProcessed",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return ExpandedReadChangesResponseMultiError(errors)
	}

	return nil
}

// ExpandedReadChangesResponseMultiError is an error wrapping multiple
// validation errors returned by ExpandedReadChangesResponse.ValidateAll() if
// the designated constraints aren't met.
type ExpandedReadChangesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExpandedReadChangesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExpandedReadChangesResponseMultiError) AllErrors() []error { return m }

// ExpandedReadChangesResponseValidationError is the validation error returned
// by ExpandedReadChangesResponse.Validate if the designated constraints
// aren't met.
type ExpandedReadChangesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExpandedReadChangesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExpandedReadChangesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExpandedReadChangesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExpandedReadChangesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExpandedReadChangesResponseValidationError) ErrorName() string {
	return "ExpandedReadChangesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ExpandedReadChangesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExpandedReadChangesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExpandedReadChangesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExpandedReadChangesResponseValidationError{}
