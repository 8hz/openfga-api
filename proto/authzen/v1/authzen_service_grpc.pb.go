// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: authzen/v1/authzen_service.proto

package authzenv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	AuthZenService_Evaluation_FullMethodName  = "/authzen.v1.AuthZenService/Evaluation"
	AuthZenService_Evaluations_FullMethodName = "/authzen.v1.AuthZenService/Evaluations"
)

// AuthZenServiceClient is the client API for AuthZenService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthZenServiceClient interface {
	Evaluation(ctx context.Context, in *EvaluationRequest, opts ...grpc.CallOption) (*EvaluationResponse, error)
	Evaluations(ctx context.Context, in *EvaluationsRequest, opts ...grpc.CallOption) (*EvaluationsResponse, error)
}

type authZenServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthZenServiceClient(cc grpc.ClientConnInterface) AuthZenServiceClient {
	return &authZenServiceClient{cc}
}

func (c *authZenServiceClient) Evaluation(ctx context.Context, in *EvaluationRequest, opts ...grpc.CallOption) (*EvaluationResponse, error) {
	out := new(EvaluationResponse)
	err := c.cc.Invoke(ctx, AuthZenService_Evaluation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authZenServiceClient) Evaluations(ctx context.Context, in *EvaluationsRequest, opts ...grpc.CallOption) (*EvaluationsResponse, error) {
	out := new(EvaluationsResponse)
	err := c.cc.Invoke(ctx, AuthZenService_Evaluations_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthZenServiceServer is the server API for AuthZenService service.
// All implementations must embed UnimplementedAuthZenServiceServer
// for forward compatibility
type AuthZenServiceServer interface {
	Evaluation(context.Context, *EvaluationRequest) (*EvaluationResponse, error)
	Evaluations(context.Context, *EvaluationsRequest) (*EvaluationsResponse, error)
	mustEmbedUnimplementedAuthZenServiceServer()
}

// UnimplementedAuthZenServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAuthZenServiceServer struct {
}

func (UnimplementedAuthZenServiceServer) Evaluation(context.Context, *EvaluationRequest) (*EvaluationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Evaluation not implemented")
}
func (UnimplementedAuthZenServiceServer) Evaluations(context.Context, *EvaluationsRequest) (*EvaluationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Evaluations not implemented")
}
func (UnimplementedAuthZenServiceServer) mustEmbedUnimplementedAuthZenServiceServer() {}

// UnsafeAuthZenServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthZenServiceServer will
// result in compilation errors.
type UnsafeAuthZenServiceServer interface {
	mustEmbedUnimplementedAuthZenServiceServer()
}

func RegisterAuthZenServiceServer(s grpc.ServiceRegistrar, srv AuthZenServiceServer) {
	s.RegisterService(&AuthZenService_ServiceDesc, srv)
}

func _AuthZenService_Evaluation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EvaluationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthZenServiceServer).Evaluation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthZenService_Evaluation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthZenServiceServer).Evaluation(ctx, req.(*EvaluationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthZenService_Evaluations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EvaluationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthZenServiceServer).Evaluations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthZenService_Evaluations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthZenServiceServer).Evaluations(ctx, req.(*EvaluationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AuthZenService_ServiceDesc is the grpc.ServiceDesc for AuthZenService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AuthZenService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "authzen.v1.AuthZenService",
	HandlerType: (*AuthZenServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Evaluation",
			Handler:    _AuthZenService_Evaluation_Handler,
		},
		{
			MethodName: "Evaluations",
			Handler:    _AuthZenService_Evaluations_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "authzen/v1/authzen_service.proto",
}
