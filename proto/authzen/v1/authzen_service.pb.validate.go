// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: authzen/v1/authzen_service.proto

package authzenv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on EvaluationRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *EvaluationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EvaluationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// EvaluationRequestMultiError, or nil if none found.
func (m *EvaluationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *EvaluationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetSubject() == nil {
		err := EvaluationRequestValidationError{
			field:  "Subject",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetSubject()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, EvaluationRequestValidationError{
					field:  "Subject",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, EvaluationRequestValidationError{
					field:  "Subject",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSubject()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EvaluationRequestValidationError{
				field:  "Subject",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetResource() == nil {
		err := EvaluationRequestValidationError{
			field:  "Resource",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetResource()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, EvaluationRequestValidationError{
					field:  "Resource",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, EvaluationRequestValidationError{
					field:  "Resource",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResource()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EvaluationRequestValidationError{
				field:  "Resource",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetAction() == nil {
		err := EvaluationRequestValidationError{
			field:  "Action",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetAction()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, EvaluationRequestValidationError{
					field:  "Action",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, EvaluationRequestValidationError{
					field:  "Action",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAction()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EvaluationRequestValidationError{
				field:  "Action",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetContext()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, EvaluationRequestValidationError{
					field:  "Context",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, EvaluationRequestValidationError{
					field:  "Context",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetContext()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EvaluationRequestValidationError{
				field:  "Context",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetStoreId() != "" {

		if !_EvaluationRequest_StoreId_Pattern.MatchString(m.GetStoreId()) {
			err := EvaluationRequestValidationError{
				field:  "StoreId",
				reason: "value does not match regex pattern \"^[ABCDEFGHJKMNPQRSTVWXYZ0-9]{26}$\"",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.GetAuthorizationModelId() != "" {

		if !_EvaluationRequest_AuthorizationModelId_Pattern.MatchString(m.GetAuthorizationModelId()) {
			err := EvaluationRequestValidationError{
				field:  "AuthorizationModelId",
				reason: "value does not match regex pattern \"^[ABCDEFGHJKMNPQRSTVWXYZ0-9]{26}$\"",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return EvaluationRequestMultiError(errors)
	}

	return nil
}

// EvaluationRequestMultiError is an error wrapping multiple validation errors
// returned by EvaluationRequest.ValidateAll() if the designated constraints
// aren't met.
type EvaluationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EvaluationRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EvaluationRequestMultiError) AllErrors() []error { return m }

// EvaluationRequestValidationError is the validation error returned by
// EvaluationRequest.Validate if the designated constraints aren't met.
type EvaluationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EvaluationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EvaluationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EvaluationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EvaluationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EvaluationRequestValidationError) ErrorName() string {
	return "EvaluationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e EvaluationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEvaluationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EvaluationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EvaluationRequestValidationError{}

var _EvaluationRequest_StoreId_Pattern = regexp.MustCompile("^[ABCDEFGHJKMNPQRSTVWXYZ0-9]{26}$")

var _EvaluationRequest_AuthorizationModelId_Pattern = regexp.MustCompile("^[ABCDEFGHJKMNPQRSTVWXYZ0-9]{26}$")

// Validate checks the field values on EvaluationsItemRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *EvaluationsItemRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EvaluationsItemRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// EvaluationsItemRequestMultiError, or nil if none found.
func (m *EvaluationsItemRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *EvaluationsItemRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Subject != nil {

		if all {
			switch v := interface{}(m.GetSubject()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, EvaluationsItemRequestValidationError{
						field:  "Subject",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, EvaluationsItemRequestValidationError{
						field:  "Subject",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetSubject()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return EvaluationsItemRequestValidationError{
					field:  "Subject",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.Resource != nil {

		if all {
			switch v := interface{}(m.GetResource()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, EvaluationsItemRequestValidationError{
						field:  "Resource",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, EvaluationsItemRequestValidationError{
						field:  "Resource",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetResource()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return EvaluationsItemRequestValidationError{
					field:  "Resource",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.Action != nil {

		if all {
			switch v := interface{}(m.GetAction()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, EvaluationsItemRequestValidationError{
						field:  "Action",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, EvaluationsItemRequestValidationError{
						field:  "Action",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetAction()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return EvaluationsItemRequestValidationError{
					field:  "Action",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.Context != nil {

		if all {
			switch v := interface{}(m.GetContext()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, EvaluationsItemRequestValidationError{
						field:  "Context",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, EvaluationsItemRequestValidationError{
						field:  "Context",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetContext()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return EvaluationsItemRequestValidationError{
					field:  "Context",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return EvaluationsItemRequestMultiError(errors)
	}

	return nil
}

// EvaluationsItemRequestMultiError is an error wrapping multiple validation
// errors returned by EvaluationsItemRequest.ValidateAll() if the designated
// constraints aren't met.
type EvaluationsItemRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EvaluationsItemRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EvaluationsItemRequestMultiError) AllErrors() []error { return m }

// EvaluationsItemRequestValidationError is the validation error returned by
// EvaluationsItemRequest.Validate if the designated constraints aren't met.
type EvaluationsItemRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EvaluationsItemRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EvaluationsItemRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EvaluationsItemRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EvaluationsItemRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EvaluationsItemRequestValidationError) ErrorName() string {
	return "EvaluationsItemRequestValidationError"
}

// Error satisfies the builtin error interface
func (e EvaluationsItemRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEvaluationsItemRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EvaluationsItemRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EvaluationsItemRequestValidationError{}

// Validate checks the field values on Subject with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Subject) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Subject with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in SubjectMultiError, or nil if none found.
func (m *Subject) ValidateAll() error {
	return m.validate(true)
}

func (m *Subject) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if !_Subject_Type_Pattern.MatchString(m.GetType()) {
		err := SubjectValidationError{
			field:  "Type",
			reason: "value does not match regex pattern \"^[^:#@\\\\s]{1,50}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_Subject_Id_Pattern.MatchString(m.GetId()) {
		err := SubjectValidationError{
			field:  "Id",
			reason: "value does not match regex pattern \"^[^:#@\\\\s]{1,500}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetProperties()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SubjectValidationError{
					field:  "Properties",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SubjectValidationError{
					field:  "Properties",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetProperties()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SubjectValidationError{
				field:  "Properties",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SubjectMultiError(errors)
	}

	return nil
}

// SubjectMultiError is an error wrapping multiple validation errors returned
// by Subject.ValidateAll() if the designated constraints aren't met.
type SubjectMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SubjectMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SubjectMultiError) AllErrors() []error { return m }

// SubjectValidationError is the validation error returned by Subject.Validate
// if the designated constraints aren't met.
type SubjectValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SubjectValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SubjectValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SubjectValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SubjectValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SubjectValidationError) ErrorName() string { return "SubjectValidationError" }

// Error satisfies the builtin error interface
func (e SubjectValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSubject.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SubjectValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SubjectValidationError{}

var _Subject_Type_Pattern = regexp.MustCompile("^[^:#@\\s]{1,50}$")

var _Subject_Id_Pattern = regexp.MustCompile("^[^:#@\\s]{1,500}$")

// Validate checks the field values on Resource with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Resource) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Resource with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ResourceMultiError, or nil
// if none found.
func (m *Resource) ValidateAll() error {
	return m.validate(true)
}

func (m *Resource) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if !_Resource_Type_Pattern.MatchString(m.GetType()) {
		err := ResourceValidationError{
			field:  "Type",
			reason: "value does not match regex pattern \"^[^:#@\\\\s]{1,50}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Id

	if all {
		switch v := interface{}(m.GetProperties()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ResourceValidationError{
					field:  "Properties",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ResourceValidationError{
					field:  "Properties",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetProperties()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ResourceValidationError{
				field:  "Properties",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ResourceMultiError(errors)
	}

	return nil
}

// ResourceMultiError is an error wrapping multiple validation errors returned
// by Resource.ValidateAll() if the designated constraints aren't met.
type ResourceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ResourceMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ResourceMultiError) AllErrors() []error { return m }

// ResourceValidationError is the validation error returned by
// Resource.Validate if the designated constraints aren't met.
type ResourceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResourceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResourceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResourceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResourceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResourceValidationError) ErrorName() string { return "ResourceValidationError" }

// Error satisfies the builtin error interface
func (e ResourceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResource.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResourceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResourceValidationError{}

var _Resource_Type_Pattern = regexp.MustCompile("^[^:#@\\s]{1,50}$")

// Validate checks the field values on Action with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Action) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Action with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in ActionMultiError, or nil if none found.
func (m *Action) ValidateAll() error {
	return m.validate(true)
}

func (m *Action) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if !_Action_Name_Pattern.MatchString(m.GetName()) {
		err := ActionValidationError{
			field:  "Name",
			reason: "value does not match regex pattern \"^[^:#@\\\\s]{1,50}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetProperties()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ActionValidationError{
					field:  "Properties",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ActionValidationError{
					field:  "Properties",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetProperties()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ActionValidationError{
				field:  "Properties",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ActionMultiError(errors)
	}

	return nil
}

// ActionMultiError is an error wrapping multiple validation errors returned by
// Action.ValidateAll() if the designated constraints aren't met.
type ActionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ActionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ActionMultiError) AllErrors() []error { return m }

// ActionValidationError is the validation error returned by Action.Validate if
// the designated constraints aren't met.
type ActionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ActionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ActionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ActionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ActionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ActionValidationError) ErrorName() string { return "ActionValidationError" }

// Error satisfies the builtin error interface
func (e ActionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAction.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ActionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ActionValidationError{}

var _Action_Name_Pattern = regexp.MustCompile("^[^:#@\\s]{1,50}$")

// Validate checks the field values on EvaluationResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *EvaluationResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EvaluationResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// EvaluationResponseMultiError, or nil if none found.
func (m *EvaluationResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *EvaluationResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Decision

	if m.Context != nil {

		if all {
			switch v := interface{}(m.GetContext()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, EvaluationResponseValidationError{
						field:  "Context",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, EvaluationResponseValidationError{
						field:  "Context",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetContext()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return EvaluationResponseValidationError{
					field:  "Context",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return EvaluationResponseMultiError(errors)
	}

	return nil
}

// EvaluationResponseMultiError is an error wrapping multiple validation errors
// returned by EvaluationResponse.ValidateAll() if the designated constraints
// aren't met.
type EvaluationResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EvaluationResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EvaluationResponseMultiError) AllErrors() []error { return m }

// EvaluationResponseValidationError is the validation error returned by
// EvaluationResponse.Validate if the designated constraints aren't met.
type EvaluationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EvaluationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EvaluationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EvaluationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EvaluationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EvaluationResponseValidationError) ErrorName() string {
	return "EvaluationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e EvaluationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEvaluationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EvaluationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EvaluationResponseValidationError{}

// Validate checks the field values on EvaluationResponseContext with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *EvaluationResponseContext) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EvaluationResponseContext with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// EvaluationResponseContextMultiError, or nil if none found.
func (m *EvaluationResponseContext) ValidateAll() error {
	return m.validate(true)
}

func (m *EvaluationResponseContext) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Id != nil {
		// no validation rules for Id
	}

	if m.ReasonAdmin != nil {

		if all {
			switch v := interface{}(m.GetReasonAdmin()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, EvaluationResponseContextValidationError{
						field:  "ReasonAdmin",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, EvaluationResponseContextValidationError{
						field:  "ReasonAdmin",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetReasonAdmin()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return EvaluationResponseContextValidationError{
					field:  "ReasonAdmin",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.ReasonUser != nil {

		if all {
			switch v := interface{}(m.GetReasonUser()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, EvaluationResponseContextValidationError{
						field:  "ReasonUser",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, EvaluationResponseContextValidationError{
						field:  "ReasonUser",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetReasonUser()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return EvaluationResponseContextValidationError{
					field:  "ReasonUser",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.Error != nil {

		if all {
			switch v := interface{}(m.GetError()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, EvaluationResponseContextValidationError{
						field:  "Error",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, EvaluationResponseContextValidationError{
						field:  "Error",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetError()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return EvaluationResponseContextValidationError{
					field:  "Error",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return EvaluationResponseContextMultiError(errors)
	}

	return nil
}

// EvaluationResponseContextMultiError is an error wrapping multiple validation
// errors returned by EvaluationResponseContext.ValidateAll() if the
// designated constraints aren't met.
type EvaluationResponseContextMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EvaluationResponseContextMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EvaluationResponseContextMultiError) AllErrors() []error { return m }

// EvaluationResponseContextValidationError is the validation error returned by
// EvaluationResponseContext.Validate if the designated constraints aren't met.
type EvaluationResponseContextValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EvaluationResponseContextValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EvaluationResponseContextValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EvaluationResponseContextValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EvaluationResponseContextValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EvaluationResponseContextValidationError) ErrorName() string {
	return "EvaluationResponseContextValidationError"
}

// Error satisfies the builtin error interface
func (e EvaluationResponseContextValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEvaluationResponseContext.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EvaluationResponseContextValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EvaluationResponseContextValidationError{}

// Validate checks the field values on EvaluationsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *EvaluationsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EvaluationsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// EvaluationsRequestMultiError, or nil if none found.
func (m *EvaluationsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *EvaluationsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetEvaluations() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, EvaluationsRequestValidationError{
						field:  fmt.Sprintf("Evaluations[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, EvaluationsRequestValidationError{
						field:  fmt.Sprintf("Evaluations[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return EvaluationsRequestValidationError{
					field:  fmt.Sprintf("Evaluations[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.GetStoreId() != "" {

		if !_EvaluationsRequest_StoreId_Pattern.MatchString(m.GetStoreId()) {
			err := EvaluationsRequestValidationError{
				field:  "StoreId",
				reason: "value does not match regex pattern \"^[ABCDEFGHJKMNPQRSTVWXYZ0-9]{26}$\"",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.Subject != nil {

		if all {
			switch v := interface{}(m.GetSubject()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, EvaluationsRequestValidationError{
						field:  "Subject",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, EvaluationsRequestValidationError{
						field:  "Subject",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetSubject()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return EvaluationsRequestValidationError{
					field:  "Subject",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.Action != nil {

		if all {
			switch v := interface{}(m.GetAction()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, EvaluationsRequestValidationError{
						field:  "Action",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, EvaluationsRequestValidationError{
						field:  "Action",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetAction()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return EvaluationsRequestValidationError{
					field:  "Action",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.Resource != nil {

		if all {
			switch v := interface{}(m.GetResource()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, EvaluationsRequestValidationError{
						field:  "Resource",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, EvaluationsRequestValidationError{
						field:  "Resource",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetResource()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return EvaluationsRequestValidationError{
					field:  "Resource",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.Context != nil {

		if all {
			switch v := interface{}(m.GetContext()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, EvaluationsRequestValidationError{
						field:  "Context",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, EvaluationsRequestValidationError{
						field:  "Context",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetContext()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return EvaluationsRequestValidationError{
					field:  "Context",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return EvaluationsRequestMultiError(errors)
	}

	return nil
}

// EvaluationsRequestMultiError is an error wrapping multiple validation errors
// returned by EvaluationsRequest.ValidateAll() if the designated constraints
// aren't met.
type EvaluationsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EvaluationsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EvaluationsRequestMultiError) AllErrors() []error { return m }

// EvaluationsRequestValidationError is the validation error returned by
// EvaluationsRequest.Validate if the designated constraints aren't met.
type EvaluationsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EvaluationsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EvaluationsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EvaluationsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EvaluationsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EvaluationsRequestValidationError) ErrorName() string {
	return "EvaluationsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e EvaluationsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEvaluationsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EvaluationsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EvaluationsRequestValidationError{}

var _EvaluationsRequest_StoreId_Pattern = regexp.MustCompile("^[ABCDEFGHJKMNPQRSTVWXYZ0-9]{26}$")

// Validate checks the field values on EvaluationsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *EvaluationsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EvaluationsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// EvaluationsResponseMultiError, or nil if none found.
func (m *EvaluationsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *EvaluationsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetEvaluationResponses() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, EvaluationsResponseValidationError{
						field:  fmt.Sprintf("EvaluationResponses[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, EvaluationsResponseValidationError{
						field:  fmt.Sprintf("EvaluationResponses[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return EvaluationsResponseValidationError{
					field:  fmt.Sprintf("EvaluationResponses[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return EvaluationsResponseMultiError(errors)
	}

	return nil
}

// EvaluationsResponseMultiError is an error wrapping multiple validation
// errors returned by EvaluationsResponse.ValidateAll() if the designated
// constraints aren't met.
type EvaluationsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EvaluationsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EvaluationsResponseMultiError) AllErrors() []error { return m }

// EvaluationsResponseValidationError is the validation error returned by
// EvaluationsResponse.Validate if the designated constraints aren't met.
type EvaluationsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EvaluationsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EvaluationsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EvaluationsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EvaluationsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EvaluationsResponseValidationError) ErrorName() string {
	return "EvaluationsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e EvaluationsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEvaluationsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EvaluationsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EvaluationsResponseValidationError{}

// Validate checks the field values on ResponseContextError with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ResponseContextError) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ResponseContextError with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ResponseContextErrorMultiError, or nil if none found.
func (m *ResponseContextError) ValidateAll() error {
	return m.validate(true)
}

func (m *ResponseContextError) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	// no validation rules for Message

	if len(errors) > 0 {
		return ResponseContextErrorMultiError(errors)
	}

	return nil
}

// ResponseContextErrorMultiError is an error wrapping multiple validation
// errors returned by ResponseContextError.ValidateAll() if the designated
// constraints aren't met.
type ResponseContextErrorMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ResponseContextErrorMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ResponseContextErrorMultiError) AllErrors() []error { return m }

// ResponseContextErrorValidationError is the validation error returned by
// ResponseContextError.Validate if the designated constraints aren't met.
type ResponseContextErrorValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResponseContextErrorValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResponseContextErrorValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResponseContextErrorValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResponseContextErrorValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResponseContextErrorValidationError) ErrorName() string {
	return "ResponseContextErrorValidationError"
}

// Error satisfies the builtin error interface
func (e ResponseContextErrorValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResponseContextError.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResponseContextErrorValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResponseContextErrorValidationError{}
